// 55. 跳跃游戏

// 给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
// 数组中的每个元素代表你在该位置可以跳跃的最大长度。
// 判断你是否能够到达最后一个下标。

// 示例 1：
// 输入：nums = [2,3,1,1,4]
// 输出：true
// 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。

// 示例 2：
// 输入：nums = [3,2,1,0,4]
// 输出：false
// 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。
 
// 提示：
// 1 <= nums.length <= 3 * 104
// 0 <= nums[i] <= 105

// 思路：贪心算法，
// 这道题可以转换为是否可以跳到数组的最后一个位置
// 对每个下标i，求出他能跳到的最远位置（i+nums[i]）,

/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canJump = function(nums) {
  var n = nums.length;
  // 能跳的最远距离
  var farthest = 0;
  // i的最大值为n-2，也就是数组的倒数第二个元素，
  // 因为题目让我们算的就是是否能跳到最后一个元素。所以没必要计算最后一个
  for(var i = 0; i < n - 1; i++) {
    // 我们对每一个i求最优解
    // 不断计算能跳到的最远距离
    farthest = Math.max(farthest, i + nums[i]);
    // 可能碰到了0 能跳0步的位置
    if (farthest <= i) return false;
  }
  // 这道题可以转换为是否可以跳到数组的最后一个位置
  // 大于等于n-1说明能跳到最后一个，小于则调不到，最后返回的是boolean
  return farthest >= n - 1;
};